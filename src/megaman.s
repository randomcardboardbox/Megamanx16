;
; File generated by cc65 v 2.19 - Git ce3bcad
;
	.fopt		compiler,"cc65 v 2.19 - Git ce3bcad"
	.setcpu		"65C02"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.import		_malloc
	.import		__m_apply_velocity
	.export		_update_megaman
	.export		_check_collision
	.export		_animate_megaman
	.export		_load_megaman_spr_data
	.import		__load_palette_from_file
	.import		__load_file_into_vram
	.import		__load_file_into_ram
	.import		__check_collision_data
	.import		__get_joystick_state
	.import		_alloc_sprites
	.import		_play_anim_frame
	.import		_play_anim
	.import		_get_pressed
	.import		_coll_data_addr
	.import		_curr_room
	.export		_megaman_obj

.segment	"BSS"

_megaman_obj:
	.res	20,$00

; ---------------------------------------------------------------
; void __near__ update_megaman (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_megaman: near

.segment	"CODE"

	lda     #$0A
	jsr     pusha0
	lda     _megaman_obj
	ldx     _megaman_obj+1
	jsr     pushax
	jsr     __get_joystick_state
	jsr     pushax
	stz     _megaman_obj+6
	stz     _megaman_obj+7
	jsr     pushw0sp
	ldx     #$00
	lda     #$01
	jsr     _get_pressed
	tax
	beq     L0002
	lda     #$01
	sta     _megaman_obj+6
	lda     #$90
	sta     _megaman_obj+7
	lda     _megaman_obj+11
	ora     #$02
	sta     _megaman_obj+11
	ora     #$04
	bra     L000C
L0002:	jsr     pushw0sp
	ldx     #$00
	lda     #$02
	jsr     _get_pressed
	tax
	beq     L000D
	lda     #$FE
	sta     _megaman_obj+6
	lda     #$70
	sta     _megaman_obj+7
	lda     _megaman_obj+11
	and     #$FD
	sta     _megaman_obj+11
	ora     #$04
	bra     L000C
L000D:	lda     _megaman_obj+11
	and     #$FB
L000C:	sta     _megaman_obj+11
	jsr     pushw0sp
	ldx     #$80
	lda     #$00
	jsr     _get_pressed
	tax
	beq     L000E
	lda     _megaman_obj+11
	and     #$01
	beq     L000E
	lda     #$F6
	sta     _megaman_obj+8
	stz     _megaman_obj+9
L000E:	lda     _megaman_obj+11
	and     #$01
	bne     L000A
	inc     _megaman_obj+8
	lda     _megaman_obj+8
	cmp     #$80
	jsr     boolult
	jsr     pusha0
	lda     _megaman_obj+8
	jsr     pusha0
	ldy     #$09
	jsr     ldaxysp
	jsr     tosgtax
	jsr     tosanda0
	cmp     #$00
	beq     L000A
	ldy     #$04
	lda     (sp),y
	sta     _megaman_obj+8
L000A:	lda     #<(_megaman_obj)
	ldx     #>(_megaman_obj)
	jsr     __m_apply_velocity
	jsr     _check_collision
	lda     _megaman_obj+1
	sta     _curr_room
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ check_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_collision: near

.segment	"CODE"

	ldy     #$0B
	jsr     subysp
	lda     _megaman_obj+3
	ldx     _megaman_obj+3+1
	ldy     #$0B
	jsr     incaxy
	jsr     pushax
	lda     _megaman_obj+3
	ldx     _megaman_obj+3+1
	ldy     #$0B
	jsr     decaxy
	jsr     pushax
	lda     _megaman_obj
	ldx     _megaman_obj+1
	jsr     decax6
	jsr     pushax
	lda     _megaman_obj
	ldx     _megaman_obj+1
	jsr     incax6
	jsr     pushax
	lda     _coll_data_addr
	ldx     _coll_data_addr+1
	jsr     pushax
	ldy     #$07
	jsr     pushwysp
	ldy     #$0B
	jsr     ldaxysp
	jsr     __check_collision_data
	jsr     pusha
	lda     _coll_data_addr
	ldx     _coll_data_addr+1
	jsr     pushax
	ldy     #$06
	jsr     pushwysp
	ldy     #$0C
	jsr     ldaxysp
	jsr     __check_collision_data
	jsr     pusha
	lda     _coll_data_addr
	ldx     _coll_data_addr+1
	jsr     pushax
	ldy     #$09
	jsr     pushwysp
	ldy     #$0B
	jsr     ldaxysp
	jsr     __check_collision_data
	jsr     pusha
	lda     _coll_data_addr
	ldx     _coll_data_addr+1
	jsr     pushax
	ldy     #$08
	jsr     pushwysp
	ldy     #$0C
	jsr     ldaxysp
	jsr     __check_collision_data
	jsr     pusha
	lda     _coll_data_addr
	ldx     _coll_data_addr+1
	jsr     pushax
	ldy     #$0B
	jsr     pushwysp
	lda     _megaman_obj+3
	ldx     _megaman_obj+3+1
	jsr     __check_collision_data
	jsr     pusha
	lda     _coll_data_addr
	ldx     _coll_data_addr+1
	jsr     pushax
	ldy     #$0A
	jsr     pushwysp
	lda     _megaman_obj+3
	ldx     _megaman_obj+3+1
	jsr     __check_collision_data
	jsr     pusha
	ldy     #$04
	lda     (sp),y
	iny
	ora     (sp),y
	pha
	pla
	beq     L000A
	lda     _megaman_obj+3
	ldx     _megaman_obj+3+1
	ldy     #$12
	jsr     decaxy
	ldx     #$00
	and     #$F0
	ldy     #$15
	jsr     incaxy
	sta     _megaman_obj+3
	stx     _megaman_obj+3+1
	stz     _megaman_obj+5
	stz     _megaman_obj+8
	stz     _megaman_obj+9
	lda     _megaman_obj+11
	ora     #$01
	bra     L0009
L000A:	lda     _megaman_obj+11
	and     #$FE
L0009:	sta     _megaman_obj+11
	ldx     #$00
	ldy     #$02
	lda     (sp),y
	iny
	ora     (sp),y
	pha
	pla
	beq     L000C
	lda     _megaman_obj+3
	and     #$F0
	ldy     #$10
	jsr     incaxy
	sta     _megaman_obj+3
	stx     _megaman_obj+3+1
	stz     _megaman_obj+5
	stz     _megaman_obj+8
	stz     _megaman_obj+9
L000C:	lda     (sp)
	ldy     #$01
	ora     (sp),y
	pha
	pla
	beq     L0005
	lda     _megaman_obj+3
	ldx     _megaman_obj+3+1
	ldy     #$18
	jsr     decaxy
	ldx     #$00
	and     #$F0
	ldy     #$15
	jsr     incaxy
	sta     _megaman_obj+3
	stx     _megaman_obj+3+1
	stz     _megaman_obj+5
	stz     _megaman_obj+8
	stz     _megaman_obj+9
	lda     #$01
	tsb     _megaman_obj+11
L0005:	lda     _megaman_obj
	ldx     _megaman_obj+1
	ldy     #$17
	jsr     staxysp
	lda     _megaman_obj+3
	ldx     _megaman_obj+3+1
	jsr     decax4
	ldy     #$15
	jsr     staxysp
	lda     _megaman_obj+3
	ldx     _megaman_obj+3+1
	jsr     decax8
	ldy     #$13
	jsr     staxysp
	lda     _megaman_obj+3
	ldx     _megaman_obj+3+1
	jsr     incax8
	ldy     #$11
	jsr     staxysp
	ldx     #$00
	lda     _megaman_obj+6
	cmp     #$7F
	bcs     L000B
	ldy     #$17
	lda     #$08
	jsr     addeqysp
	bra     L0007
L000B:	lda     #$08
	ldy     #$17
	jsr     subeqysp
L0007:	lda     _coll_data_addr
	ldx     _coll_data_addr+1
	jsr     pushax
	ldy     #$1C
	jsr     pushwysp
	ldy     #$1A
	jsr     ldaxysp
	jsr     __check_collision_data
	ldy     #$10
	sta     (sp),y
	lda     _coll_data_addr
	ldx     _coll_data_addr+1
	jsr     pushax
	ldy     #$1C
	jsr     pushwysp
	ldy     #$18
	jsr     ldaxysp
	jsr     __check_collision_data
	ldy     #$0F
	sta     (sp),y
	lda     _coll_data_addr
	ldx     _coll_data_addr+1
	jsr     pushax
	ldy     #$1C
	jsr     pushwysp
	ldy     #$16
	jsr     ldaxysp
	jsr     __check_collision_data
	ldy     #$0E
	sta     (sp),y
	iny
	lda     (sp),y
	iny
	ora     (sp),y
	sta     ptr1
	ldy     #$0E
	lda     (sp),y
	ora     ptr1
	pha
	pla
	beq     L0008
	lda     _megaman_obj
	ldx     _megaman_obj+1
	and     #$F0
	jsr     incax8
	sta     _megaman_obj
	stx     _megaman_obj+1
	stz     _megaman_obj+2
L0008:	ldy     #$19
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ animate_megaman (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_animate_megaman: near

.segment	"CODE"

	ldy     #$0E
	jsr     subysp
	ldy     #$0D
L0002:	lda     M0001,y
	sta     (sp),y
	dey
	bpl     L0002
	lda     #$00
	jsr     pusha
	jsr     push0
	lda     _megaman_obj
	ldx     _megaman_obj+1
	jsr     aslax1
	sta     ptr1
	stx     ptr1+1
	lda     _megaman_obj+2
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	ora     ptr1
	ldx     ptr1+1
	ldy     #$20
	jsr     decaxy
	jsr     pushax
	lda     _megaman_obj+3
	ldx     _megaman_obj+3+1
	jsr     aslax1
	sta     ptr1
	stx     ptr1+1
	lda     _megaman_obj+5
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	ora     ptr1
	ldx     ptr1+1
	ldy     #$20
	jsr     decaxy
	jsr     pushax
	lda     _megaman_obj+11
	and     #$02
	bne     L0009
	ina
	ldy     #$06
	sta     (sp),y
L0009:	lda     _megaman_obj+11
	and     #$01
	cmp     #$01
	lda     #$00
	sbc     #$00
	bvs     L0006
	eor     #$80
L0006:	asl     a
	lda     #$00
	rol     a
	sta     ptr1
	lda     _megaman_obj+11
	and     #$04
	cmp     #$01
	lda     #$00
	sbc     #$00
	bvs     L0007
	eor     #$80
L0007:	asl     a
	lda     #$00
	rol     a
	and     ptr1
	pha
	pla
	beq     L0005
	lda     #$0E
	jsr     pusha
	lda     #$08
	jsr     leaa0sp
	jsr     pushax
	lda     #<(_megaman_obj)
	ldx     #>(_megaman_obj)
	jsr     _play_anim
	bra     L0008
L0005:	lda     #<(_megaman_obj)
	ldx     #>(_megaman_obj)
	jsr     _play_anim_frame
	stz     _megaman_obj+14
	stz     _megaman_obj+12
	stz     _megaman_obj+12+1
	stz     _megaman_obj+15
L0008:	ldy     #$15
	jmp     addysp

.segment	"RODATA"

M0001:
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$0D
	.byte	$0E

.endproc

; ---------------------------------------------------------------
; void __near__ load_megaman_spr_data (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_megaman_spr_data: near

.segment	"CODE"

	ldy     #$0C
	jsr     subysp
	ldy     #$0B
L0002:	lda     M0001,y
	sta     (sp),y
	dey
	bpl     L0002
	ldy     #$0C
	jsr     subysp
	ldy     #$0B
L0003:	lda     M0002,y
	sta     (sp),y
	dey
	bpl     L0003
	ldy     #$0C
	jsr     subysp
	ldy     #$0B
L0004:	lda     M0003,y
	sta     (sp),y
	dey
	bpl     L0004
	ldx     #$10
	lda     #$00
	jsr     _malloc
	jsr     pushax
	lda     #$00
	jsr     pusha
	jsr     pusha
	lda     #$1C
	jsr     leaa0sp
	jsr     pushax
	lda     #$0B
	jsr     pusha
	lda     #$00
	jsr     __load_palette_from_file
	lda     #$10
	jsr     leaa0sp
	jsr     pushax
	lda     #$0B
	jsr     pusha
	lda     #$00
	jsr     pusha
	tax
	jsr     __load_file_into_vram
	lda     #$04
	jsr     leaa0sp
	jsr     pushax
	lda     #$0B
	jsr     pusha
	ldy     #$06
	jsr     ldaxysp
	jsr     __load_file_into_ram
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	ldy     #$01
	sta     (sp),y
	jsr     _alloc_sprites
	sta     (sp)
	ldy     #$03
	jsr     ldaxysp
	sta     _megaman_obj+16
	stx     _megaman_obj+16+1
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	sta     _megaman_obj+18
	lda     (sp)
	sta     _megaman_obj+19
	stz     _megaman_obj+12
	stz     _megaman_obj+12+1
	stz     _megaman_obj+15
	stz     _megaman_obj+14
	ldy     #$28
	jmp     addysp

.segment	"RODATA"

M0001:
	.byte	$4D,$45,$47,$41,$4D,$41,$4E,$2E,$50,$41,$4C,$00
M0002:
	.byte	$4D,$45,$47,$41,$4D,$41,$4E,$2E,$53,$50,$52,$00
M0003:
	.byte	$4D,$45,$47,$41,$4D,$41,$4E,$2E,$41,$4E,$4D,$00

.endproc

