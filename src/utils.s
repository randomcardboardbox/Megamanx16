;
; File generated by cc65 v 2.19 - Git ce3bcad
;
	.fopt		compiler,"cc65 v 2.19 - Git ce3bcad"
	.setcpu		"65C02"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.import		_malloc
	.import		_free
	.import		_scroll_x
	.import		_scroll_y
	.import		_map_info_addr
	.import		_tile_map0_ram_addr
	.import		_tile_map1_ram_addr
	.import		_coll_data_addr
	.import		_lvl_num
	.import		_room_data_size
	.import		_tile_map
	.import		_tile_map2
	.import		_col_map
	.import		__load_file_into_ram
	.import		__clear_sprite_attribute
	.import		__transfer_spr_attr_to_vram
	.export		_alloc_sprites
	.export		_dealloc_sprites
	.export		_play_anim_frame
	.export		_play_anim
	.export		_load_map_data
	.export		_get_pressed
	.export		_spr_alloc_table

.segment	"DATA"

_spr_alloc_table:
	.byte	$00
	.res	127,$00

; ---------------------------------------------------------------
; char __near__ alloc_sprites (char size)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_alloc_sprites: near

.segment	"CODE"

	jsr     pusha
	jsr     push0
	jsr     push0
	jsr     push0
	ldy     #$04
	jsr     staxysp
L0002:	ldy     #$07
	jsr     pushwysp
	lda     #$80
	sec
	ldy     #$08
	sbc     (sp),y
	pha
	lda     #$00
	sbc     #$00
	tax
	pla
	jsr     tosicmp
	jpl     L0003
	ldy     #$05
	jsr     ldaxysp
	sta     ptr1
	txa
	clc
	adc     #>(_spr_alloc_table)
	sta     ptr1+1
	ldy     #<(_spr_alloc_table)
	lda     (ptr1),y
	beq     L0006
	ldy     #$05
	jsr     ldaxysp
	jsr     stax0sp
L0006:	ldy     #$05
	jsr     ldaxysp
	sec
	sbc     (sp)
	pha
	txa
	ldy     #$01
	sbc     (sp),y
	tax
	pla
	jsr     pushax
	ldy     #$08
	ldx     #$00
	lda     (sp),y
	jsr     decax1
	jsr     tosicmp
	bne     L0004
	jsr     ldax0sp
	clc
	adc     #<(_spr_alloc_table)
	sta     ptr1
	txa
	adc     #>(_spr_alloc_table)
	sta     ptr1+1
	ldy     #$06
	lda     (sp),y
	sta     (ptr1)
	ldx     #$00
	lda     #$01
	ldy     #$02
	jsr     staxysp
L0008:	ldy     #$03
	jsr     ldaxysp
	ldy     #$06
	cmp     (sp),y
	txa
	sbc     #$00
	bvc     L000C
	eor     #$80
L000C:	bpl     L0009
	ldy     #$03
	jsr     ldaxysp
	clc
	adc     (sp)
	pha
	txa
	ldy     #$01
	adc     (sp),y
	tax
	pla
	clc
	adc     #<(_spr_alloc_table)
	sta     ptr1
	txa
	adc     #>(_spr_alloc_table)
	sta     ptr1+1
	tya
	sta     (ptr1)
	iny
	ldx     #$00
	jsr     addeqysp
	bra     L0008
L0009:	ldx     #$00
	lda     (sp)
	jmp     incsp7
L0004:	ldy     #$04
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	jmp     L0002
L0003:	ldx     #$00
	lda     #$7F
	sec
	ldy     #$06
	sbc     (sp),y
	jmp     incsp7

.endproc

; ---------------------------------------------------------------
; void __near__ dealloc_sprites (char index)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_dealloc_sprites: near

.segment	"CODE"

	jsr     pusha
	jsr     push0
	ldy     #$02
	lda     (sp),y
	sta     ptr1
	jsr     ldax0sp
	clc
	adc     ptr1
	bcc     L0006
	inx
L0006:	sta     ptr1
	txa
	clc
	adc     #>(_spr_alloc_table)
	sta     ptr1+1
	ldy     #<(_spr_alloc_table)
	lda     (ptr1),y
	jsr     pusha0
	lda     #$00
	ldy     #$02
	jsr     staxysp
L0002:	ldy     #$03
	jsr     ldaxysp
	cmp     (sp)
	txa
	ldy     #$01
	sbc     (sp),y
	bvc     L0007
	eor     #$80
L0007:	bpl     L0003
	ldy     #$04
	lda     (sp),y
	sta     ptr1
	dey
	jsr     ldaxysp
	clc
	adc     ptr1
	bcc     L000A
	inx
	clc
L000A:	adc     #<(_spr_alloc_table)
	sta     ptr1
	txa
	adc     #>(_spr_alloc_table)
	sta     ptr1+1
	lda     #$00
	sta     (ptr1)
	ldy     #$04
	lda     (sp),y
	sta     ptr1
	ldy     #$02
	lda     (sp),y
	clc
	adc     ptr1
	jsr     __clear_sprite_attribute
	ldy     #$02
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	bra     L0002
L0003:	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ play_anim_frame (struct MegamanStruct *obj)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_play_anim_frame: near

.segment	"CODE"

	jsr     pushax
	lda     #$00
	jsr     pusha
	jsr     push0
	ldy     #$04
	jsr     ldaxysp
	jsr     ldaxi
	jsr     aslax1
	sta     sreg
	stx     sreg+1
	ldy     #$04
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	ora     sreg
	ldx     sreg+1
	ldy     #$20
	jsr     decaxy
	sec
	sbc     _scroll_x
	pha
	txa
	sbc     _scroll_x+1
	tax
	pla
	tay
	txa
	and     #$01
	tax
	tya
	jsr     pushax
	ldy     #$06
	jsr     ldaxysp
	ldy     #$04
	jsr     ldaxidx
	jsr     aslax1
	sta     sreg
	stx     sreg+1
	ldy     #$06
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$05
	lda     (ptr1),y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	ora     sreg
	ldx     sreg+1
	ldy     #$20
	jsr     decaxy
	sec
	sbc     _scroll_y
	pha
	txa
	sbc     _scroll_y+1
	tax
	pla
	tay
	txa
	and     #$01
	tax
	tya
	jsr     pushax
	jsr     decsp2
	ldy     #$0A
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$0B
	lda     (ptr1),y
	and     #$02
	bne     L0002
	ina
	ldy     #$08
	sta     (sp),y
L0002:	ldy     #$0A
	jsr     ldaxysp
	ldy     #$11
	jsr     ldaxidx
	jsr     incax3
	jsr     pushax
	ldy     #$0A
	ldx     #$00
	lda     (sp),y
	jsr     shlax3
	jsr     pushax
	ldy     #$0E
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$12
	lda     (ptr1),y
	jsr     tosmula0
	jsr     tosaddax
	jsr     pushax
	ldy     #$0C
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$12
	ldx     #$00
	lda     (ptr1),y
	jsr     shlax4
	jsr     incax2
	jsr     pushax
	ldy     #$0E
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$0E
	lda     (ptr1),y
	jsr     tosmula0
	jsr     tosaddax
	jsr     stax0sp
	ldx     #$00
	txa
	ldy     #$06
	jsr     staxysp
L0003:	ldy     #$09
	jsr     pushwysp
	ldy     #$0C
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$12
	lda     (ptr1),y
	jsr     tosicmp0
	bpl     L0004
	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	ldy     #$0B
	jsr     ldaxysp
	jsr     aslax3
	clc
	ldy     #$04
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	lda     #$01
	jsr     pusha
	ldy     #$11
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$13
	lda     (ptr1),y
	clc
	ldy     #$0D
	adc     (sp),y
	pha
	lda     #$00
	iny
	adc     (sp),y
	tax
	pla
	jsr     aslax3
	sta     ptr1
	stx     ptr1+1
	clc
	lda     ptr1
	pha
	lda     #$FC
	adc     ptr1+1
	tax
	pla
	jsr     __transfer_spr_attr_to_vram
	ldy     #$06
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	bra     L0003
L0004:	ldy     #$0B
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ play_anim (char num_of_frames, char *anim_ram_addr, struct MegamanStruct *obj)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_play_anim: near

.segment	"CODE"

	jsr     pushax
	jsr     ldax0sp
	ldy     #$11
	jsr     ldaxidx
	ina
	bne     L0002
	inx
L0002:	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$12
	ldx     #$00
	lda     (ptr1),y
	jsr     shlax4
	jsr     incax2
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$0F
	lda     (ptr1),y
	clc
	ldy     #$06
	adc     (sp),y
	sta     ptr1
	lda     #$00
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     (ptr1)
	jsr     tosmula0
	jsr     tosaddax
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	ldy     #$0D
	jsr     ldaxidx
	cmp     #$02
	txa
	sbc     #$00
	bvc     L0004
	eor     #$80
L0004:	bpl     L0003
	ldy     #$03
	jsr     ldaxysp
	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$0F
	lda     (ptr1),y
	ina
	sta     (sreg),y
	ldy     #$03
	jsr     ldaxysp
	sta     sreg
	stx     sreg+1
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	ldy     #$0C
	sta     (sreg),y
	iny
	lda     #$00
	sta     (sreg),y
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$0F
	lda     (ptr1),y
	ldy     #$06
	cmp     (sp),y
	bcc     L0005
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	ldy     #$0F
	sta     (ptr1),y
L0005:	ldy     #$03
	jsr     ldaxysp
	sta     sreg
	stx     sreg+1
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$0F
	lda     (ptr1),y
	clc
	ldy     #$04
	adc     (sp),y
	sta     ptr1
	lda     #$00
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     (ptr1)
	ldy     #$0E
	sta     (sreg),y
L0003:	ldy     #$03
	jsr     ldaxysp
	sta     sreg
	stx     sreg+1
	ldy     #$0D
	jsr     ldaxidx
	jsr     decax1
	ldy     #$0C
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
	ldy     #$03
	jsr     ldaxysp
	jsr     _play_anim_frame
	jmp     incsp7

.endproc

; ---------------------------------------------------------------
; void __near__ load_map_data (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_map_data: near

.segment	"CODE"

	lda     _map_info_addr
	ldx     _map_info_addr+1
	jsr     pushax
	lda     _lvl_num
	jsr     pusha0
	lda     _room_data_size
	jsr     tosumula0
	jsr     tosaddax
	jsr     incax7
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	jsr     pusha
	lda     #$00
	jsr     pusha
	lda     _coll_data_addr
	ora     _coll_data_addr+1
	beq     L000A
	lda     _coll_data_addr
	ldx     _coll_data_addr+1
	jsr     _free
	lda     #$00
L000A:	sta     (sp)
	ldy     #$01
	cmp     (sp),y
	jcs     L0005
	ldx     #$00
	lda     (sp)
	ldy     #$30
	jsr     incaxy
	sta     _tile_map+8
	ldx     #$00
	lda     (sp)
	ldy     #$30
	jsr     incaxy
	sta     _tile_map2+8
	lda     _map_info_addr
	ldx     _map_info_addr+1
	jsr     pushax
	lda     _lvl_num
	jsr     pusha0
	lda     _room_data_size
	jsr     tosumula0
	jsr     tosaddax
	jsr     incax2
	jsr     ldaxi
	jsr     _malloc
	sta     _coll_data_addr
	stx     _coll_data_addr+1
	lda     (sp)
	asl     a
	ina
	sta     $0000
	lda     #<(_tile_map)
	ldx     #>(_tile_map)
	jsr     pushax
	lda     #$0D
	jsr     pusha
	lda     _tile_map0_ram_addr
	ldx     _tile_map0_ram_addr+1
	jsr     __load_file_into_ram
	lda     (sp)
	asl     a
	clc
	adc     #$02
	sta     $0000
	lda     #<(_tile_map2)
	ldx     #>(_tile_map2)
	jsr     pushax
	lda     #$0D
	jsr     pusha
	lda     _tile_map1_ram_addr
	ldx     _tile_map1_ram_addr+1
	jsr     __load_file_into_ram
	clc
	lda     #$01
	adc     (sp)
	jmp     L000A
L0005:	lda     #<(_col_map)
	ldx     #>(_col_map)
	jsr     pushax
	lda     #$0A
	jsr     pusha
	lda     _coll_data_addr
	ldx     _coll_data_addr+1
	jsr     __load_file_into_ram
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; char __near__ get_pressed (int joystick, int button)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_pressed: near

.segment	"CODE"

	jsr     pushax
	jsr     ldax0sp
	ldy     #$02
	and     (sp),y
	pha
	txa
	iny
	and     (sp),y
	tax
	pla
	cpx     #$00
	bne     L0004
	cmp     #$00
	beq     L0001
L0004:	ldx     #$00
	lda     #$01
L0001:	jmp     incsp4

.endproc

